// Generated by CoffeeScript 1.7.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.App = (function(_super) {
    __extends(App, _super);

    function App() {
      return App.__super__.constructor.apply(this, arguments);
    }

    App.prototype.initialize = function() {
      var deck;
      this.set('deck', deck = new Deck());
      this.set('playerHand', deck.dealPlayer());
      this.set('dealerHand', deck.dealDealer());
      this.set('gameScore', [0, 0]);
      (this.get('playerHand')).on('stand hit', function(isDealer, score) {
        this.updateScore(isDealer, score);
        return this.gameOverCheck();
      }, this);
      (this.get('playerHand')).on('stand', function() {
        return this.dealerLogic();
      }, this);
      return this.set('gameOver', false);
    };

    App.prototype.updateScore = function(isDealer, score) {
      var currentScore, oldScore, scoreLength;
      scoreLength = score.length;
      if (scoreLength > 1 && score[1] < 22) {
        currentScore = score[1];
      } else {
        currentScore = score[0];
      }
      oldScore = this.get('gameScore');
      if (isDealer != null) {
        oldScore[1] = currentScore;
        return this.set('gameScore', oldScore);
      } else {
        oldScore[0] = currentScore;
        return this.set('gameScore', oldScore);
      }
    };

    App.prototype.gameOverCheck = function() {
      if ((this.get('gameScore'))[0] > 21) {
        this.set('gameOver', true);
        return alert('you lose');
      }
    };

    App.prototype.newGame = function() {
      this.initialize();
      return this.set('gameOver', false);
    };

    App.prototype.dealerLogic = function() {
      console.log('dealer in control');
      return this.get('dealerHand'.at(0).flip)();
    };

    return App;

  })(Backbone.Model);

}).call(this);

//# sourceMappingURL=App.map
